[
  {
    "objectID": "Programming in Base R.html",
    "href": "Programming in Base R.html",
    "title": "HW2 - Programming in Base R",
    "section": "",
    "text": "Task 1: Basic Vector Practice\nWe are told we have data from a medical experiment on blood pressure with 20 subjects. The following will be a vector of the 20 pre-treatment blood pressure values\n\npre_trt &lt;- c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 131, 138, 128, 140,\n            137, 131, 120, 128, 129, 135)\npre_trt\n\n [1] 130 128 116 124 133 134 118 126 114 127 131 138 128 140 137 131 120 128 129\n[20] 135\n\n\nNow that we have successfully create our pre-treatment vector, we will now create another vector that holds the post treatment blood pressure values of all 20 patients (note: subject i will be denoted by index i, i.e. subject 1 will be index 1 in both vectors)\n\npost_trt &lt;- c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122,\n             106, 106, 124, 102, 117, 113)\npost_trt\n\n [1] 114  98 113  99 107 116 113 111 119 117 101 119 130 122 106 106 124 102 117\n[20] 113\n\n\nWe have successfully created both pre/post treatment vectors. Now we will assign the values in each vector to a specific subject. This will be done using the names() and paste() functions.\n\nsubject_names &lt;- paste(\"Subject\", 1:20, sep = \"_\")\n\nnames(pre_trt) &lt;- subject_names\npre_trt\n\n Subject_1  Subject_2  Subject_3  Subject_4  Subject_5  Subject_6  Subject_7 \n       130        128        116        124        133        134        118 \n Subject_8  Subject_9 Subject_10 Subject_11 Subject_12 Subject_13 Subject_14 \n       126        114        127        131        138        128        140 \nSubject_15 Subject_16 Subject_17 Subject_18 Subject_19 Subject_20 \n       137        131        120        128        129        135 \n\nnames(post_trt) &lt;- subject_names\npost_trt\n\n Subject_1  Subject_2  Subject_3  Subject_4  Subject_5  Subject_6  Subject_7 \n       114         98        113         99        107        116        113 \n Subject_8  Subject_9 Subject_10 Subject_11 Subject_12 Subject_13 Subject_14 \n       111        119        117        101        119        130        122 \nSubject_15 Subject_16 Subject_17 Subject_18 Subject_19 Subject_20 \n       106        106        124        102        117        113 \n\n\nNext, we are going to calculate the change in blood pressure for each patient. This will be done by subtracting the pots-treatment values from the pre-treatment values. This will be saved in a new vector\n\nbp_change &lt;- pre_trt - post_trt\nbp_change\n\n Subject_1  Subject_2  Subject_3  Subject_4  Subject_5  Subject_6  Subject_7 \n        16         30          3         25         26         18          5 \n Subject_8  Subject_9 Subject_10 Subject_11 Subject_12 Subject_13 Subject_14 \n        15         -5         10         30         19         -2         18 \nSubject_15 Subject_16 Subject_17 Subject_18 Subject_19 Subject_20 \n        31         25         -4         26         12         22 \n\n\nSince we now have the change in blood pressure for each subject, we now want to know that average change in blood pressure across all patients. This can be done using the mean() function.\n\navg_bp_change &lt;- mean(bp_change)\npaste(\"Average Change in Blood Pressure:\", avg_bp_change)\n\n[1] \"Average Change in Blood Pressure: 16\"\n\n\nNext, we want to know which subjects experienced a decrease in blood pressure after the treatment. We can use the which() function to return the indices (and names) to find such subjects\n\nbp_decrease &lt;- which(bp_change &gt; 0)\ncat(\"Subjects that experienced a decrease in blood pressure: \\n\", names(bp_decrease))\n\nSubjects that experienced a decrease in blood pressure: \n Subject_1 Subject_2 Subject_3 Subject_4 Subject_5 Subject_6 Subject_7 Subject_8 Subject_10 Subject_11 Subject_12 Subject_14 Subject_15 Subject_16 Subject_18 Subject_19 Subject_20\n\n\nNow, we want to subset the bp_change vector (vector of differences) to only include those that have a positive change\n\npos_change &lt;- bp_change[c(1:8, 10:12, 14:16, 18:20)]\npos_change\n\n Subject_1  Subject_2  Subject_3  Subject_4  Subject_5  Subject_6  Subject_7 \n        16         30          3         25         26         18          5 \n Subject_8 Subject_10 Subject_11 Subject_12 Subject_14 Subject_15 Subject_16 \n        15         10         30         19         18         31         25 \nSubject_18 Subject_19 Subject_20 \n        26         12         22 \n\n\nWe now know which subjects experienced a positive change in blood pressure, and we want to know what the average of the positive changes are\n\navg_pos_change &lt;- mean(pos_change)\npaste(\"Average BP change for subjects who experienced decrease in blood pressure:\",\n      avg_pos_change)\n\n[1] \"Average BP change for subjects who experienced decrease in blood pressure: 19.4705882352941\"\n\n\n\n\nTask 2: Basic Data Frame Practice\nContinuing on with the vectors we had created above, we want to make a data frame from them. The data frame will have four columns: patient, pre_bp, post_bp, and diff_bp.\n\nbp_df &lt;- data.frame(subject_names, pre_trt, post_trt, bp_change, row.names = NULL)\ncolnames(bp_df) &lt;- c(\"patient\", \"pre_bp\", \"post_bp\", \"diff_bp\")\nhead(bp_df)\n\n    patient pre_bp post_bp diff_bp\n1 Subject_1    130     114      16\n2 Subject_2    128      98      30\n3 Subject_3    116     113       3\n4 Subject_4    124      99      25\n5 Subject_5    133     107      26\n6 Subject_6    134     116      18\n\n\nNow, we only want to return rows where the diff_bp column is negative. We will accomplish this using the subset() function.\n\nneg_diff_bp &lt;- subset(bp_df, diff_bp &lt; 0)\nneg_diff_bp\n\n      patient pre_bp post_bp diff_bp\n9   Subject_9    114     119      -5\n13 Subject_13    128     130      -2\n17 Subject_17    120     124      -4\n\n\nTaking this new data frame, we want to add a new column. This new column will take TRUE, if the post_bp value is less than 120, and FALSE otherwise.\n\nbp_df$bp_lt_120 &lt;- bp_df$post_bp &lt; 120\n\nNow, we will print the data frame out nicely using knitr::kable(bp_df)\n\nknitr::kable(bp_df)\n\n\n\n\npatient\npre_bp\npost_bp\ndiff_bp\nbp_lt_120\n\n\n\n\nSubject_1\n130\n114\n16\nTRUE\n\n\nSubject_2\n128\n98\n30\nTRUE\n\n\nSubject_3\n116\n113\n3\nTRUE\n\n\nSubject_4\n124\n99\n25\nTRUE\n\n\nSubject_5\n133\n107\n26\nTRUE\n\n\nSubject_6\n134\n116\n18\nTRUE\n\n\nSubject_7\n118\n113\n5\nTRUE\n\n\nSubject_8\n126\n111\n15\nTRUE\n\n\nSubject_9\n114\n119\n-5\nTRUE\n\n\nSubject_10\n127\n117\n10\nTRUE\n\n\nSubject_11\n131\n101\n30\nTRUE\n\n\nSubject_12\n138\n119\n19\nTRUE\n\n\nSubject_13\n128\n130\n-2\nFALSE\n\n\nSubject_14\n140\n122\n18\nFALSE\n\n\nSubject_15\n137\n106\n31\nTRUE\n\n\nSubject_16\n131\n106\n25\nTRUE\n\n\nSubject_17\n120\n124\n-4\nFALSE\n\n\nSubject_18\n128\n102\n26\nTRUE\n\n\nSubject_19\n129\n117\n12\nTRUE\n\n\nSubject_20\n135\n113\n22\nTRUE\n\n\n\n\n\n\n\nTask 3: List Practice\nWe are given new data from a different experiment where the ‘treatment’ is actually a placebo. We will create a new data frame of this data that looks similar to the one we created in Task 2.\n\npre_trt_placebo &lt;- c(138, 135, 147, 117, 152, 134, 114, 121, 131, 130)\npost_trt_placebo &lt;- c(105, 136, 123, 130, 134, 143, 135, 139, 120, 124)\nbp_diff_placebo &lt;- pre_trt_placebo - post_trt_placebo\nsubject_names_placebo &lt;- paste(\"Subject\", 1:10, sep = \"_\")\n\nplacebo_df &lt;- data.frame(subject_names_placebo, pre_trt_placebo, post_trt_placebo, bp_diff_placebo)\ncolnames(placebo_df) &lt;- c(\"patient\", \"pre_bp\", \"post_bp\", \"diff_bp\")\nplacebo_df$post_bp_lt_120 &lt;- placebo_df$post_bp &lt; 120\n\nNow that we have successfully created a new data frame like the one created in Task 2, we will create a list that stores both of the data frames.\n\nmy_list &lt;- list(treatment = bp_df, placebo = placebo_df)\n\nNext, we are going to access the first list element using three different types of syntax.\n\nmy_list[1]\n\n$treatment\n      patient pre_bp post_bp diff_bp bp_lt_120\n1   Subject_1    130     114      16      TRUE\n2   Subject_2    128      98      30      TRUE\n3   Subject_3    116     113       3      TRUE\n4   Subject_4    124      99      25      TRUE\n5   Subject_5    133     107      26      TRUE\n6   Subject_6    134     116      18      TRUE\n7   Subject_7    118     113       5      TRUE\n8   Subject_8    126     111      15      TRUE\n9   Subject_9    114     119      -5      TRUE\n10 Subject_10    127     117      10      TRUE\n11 Subject_11    131     101      30      TRUE\n12 Subject_12    138     119      19      TRUE\n13 Subject_13    128     130      -2     FALSE\n14 Subject_14    140     122      18     FALSE\n15 Subject_15    137     106      31      TRUE\n16 Subject_16    131     106      25      TRUE\n17 Subject_17    120     124      -4     FALSE\n18 Subject_18    128     102      26      TRUE\n19 Subject_19    129     117      12      TRUE\n20 Subject_20    135     113      22      TRUE\n\nmy_list[[1]]\n\n      patient pre_bp post_bp diff_bp bp_lt_120\n1   Subject_1    130     114      16      TRUE\n2   Subject_2    128      98      30      TRUE\n3   Subject_3    116     113       3      TRUE\n4   Subject_4    124      99      25      TRUE\n5   Subject_5    133     107      26      TRUE\n6   Subject_6    134     116      18      TRUE\n7   Subject_7    118     113       5      TRUE\n8   Subject_8    126     111      15      TRUE\n9   Subject_9    114     119      -5      TRUE\n10 Subject_10    127     117      10      TRUE\n11 Subject_11    131     101      30      TRUE\n12 Subject_12    138     119      19      TRUE\n13 Subject_13    128     130      -2     FALSE\n14 Subject_14    140     122      18     FALSE\n15 Subject_15    137     106      31      TRUE\n16 Subject_16    131     106      25      TRUE\n17 Subject_17    120     124      -4     FALSE\n18 Subject_18    128     102      26      TRUE\n19 Subject_19    129     117      12      TRUE\n20 Subject_20    135     113      22      TRUE\n\nstr(my_list[1])\n\nList of 1\n $ treatment:'data.frame':  20 obs. of  5 variables:\n  ..$ patient  : chr [1:20] \"Subject_1\" \"Subject_2\" \"Subject_3\" \"Subject_4\" ...\n  ..$ pre_bp   : num [1:20] 130 128 116 124 133 134 118 126 114 127 ...\n  ..$ post_bp  : num [1:20] 114 98 113 99 107 116 113 111 119 117 ...\n  ..$ diff_bp  : num [1:20] 16 30 3 25 26 18 5 15 -5 10 ...\n  ..$ bp_lt_120: logi [1:20] TRUE TRUE TRUE TRUE TRUE TRUE ...\n\n\nNow, I want to access the placebo data frame from that list, and only look at the pre_bp column from that data frame. We will do this in one line\n\nmy_list[[2]][2]\n\n   pre_bp\n1     138\n2     135\n3     147\n4     117\n5     152\n6     134\n7     114\n8     121\n9     131\n10    130\n\n\n\n\nTask 4: Control Flow Practice\nWe want to characterize the post-treatment (or placebo) blood pressure measurements as optimal (\\(\\leq\\) 120), borderline (120 \\(\\lt\\) bp \\(\\leq\\) 130), and high (\\(\\gt\\) 130). We will do this by first creating a new column in each data frame above called status.\n\nmy_list[[1]]$status &lt;- character(20)\nmy_list[[2]]$status &lt;- character(10)\n\nFor the non-placebo data set (i.e, the first element of our list), we want to run a for loop that assigns the values of the status column using if/then/else logic\n\nfor (index in 1:20) {\n  if (my_list[[1]][[3]][index] &lt;= 120) {\n    my_list[[1]][[6]][index] = \"optimal\"\n  } else if (my_list[[1]][[3]][index] &gt; 120 & my_list[[1]][[3]][index] &lt;= 130) {\n    my_list[[1]][[6]][index] = \"borderline\"\n  } else {\n    my_list[[1]][[6]][index] = \"high\"\n  }\n}\n\nNow, we are going to repeat the same, but for the placebo dataset\n\nfor (index in 1:10) {\n  if (my_list[[2]][[3]][index] &lt;= 120) {\n    my_list[[2]][[6]][index] = \"optimal\"\n  } else if (my_list[[2]][[3]][index] &gt; 120 & my_list[[2]][[3]][index] &lt;= 130) {\n    my_list[[2]][[6]][index] = \"borderline\"\n  } else {\n    my_list[[2]][[6]][index] = \"high\"\n  }\n}\n\nWe will look at the data frames to make sure our loops worked.\n\nknitr::kable(my_list[[1]])\n\n\n\n\npatient\npre_bp\npost_bp\ndiff_bp\nbp_lt_120\nstatus\n\n\n\n\nSubject_1\n130\n114\n16\nTRUE\noptimal\n\n\nSubject_2\n128\n98\n30\nTRUE\noptimal\n\n\nSubject_3\n116\n113\n3\nTRUE\noptimal\n\n\nSubject_4\n124\n99\n25\nTRUE\noptimal\n\n\nSubject_5\n133\n107\n26\nTRUE\noptimal\n\n\nSubject_6\n134\n116\n18\nTRUE\noptimal\n\n\nSubject_7\n118\n113\n5\nTRUE\noptimal\n\n\nSubject_8\n126\n111\n15\nTRUE\noptimal\n\n\nSubject_9\n114\n119\n-5\nTRUE\noptimal\n\n\nSubject_10\n127\n117\n10\nTRUE\noptimal\n\n\nSubject_11\n131\n101\n30\nTRUE\noptimal\n\n\nSubject_12\n138\n119\n19\nTRUE\noptimal\n\n\nSubject_13\n128\n130\n-2\nFALSE\nborderline\n\n\nSubject_14\n140\n122\n18\nFALSE\nborderline\n\n\nSubject_15\n137\n106\n31\nTRUE\noptimal\n\n\nSubject_16\n131\n106\n25\nTRUE\noptimal\n\n\nSubject_17\n120\n124\n-4\nFALSE\nborderline\n\n\nSubject_18\n128\n102\n26\nTRUE\noptimal\n\n\nSubject_19\n129\n117\n12\nTRUE\noptimal\n\n\nSubject_20\n135\n113\n22\nTRUE\noptimal\n\n\n\n\nknitr::kable(my_list[[2]])\n\n\n\n\npatient\npre_bp\npost_bp\ndiff_bp\npost_bp_lt_120\nstatus\n\n\n\n\nSubject_1\n138\n105\n33\nTRUE\noptimal\n\n\nSubject_2\n135\n136\n-1\nFALSE\nhigh\n\n\nSubject_3\n147\n123\n24\nFALSE\nborderline\n\n\nSubject_4\n117\n130\n-13\nFALSE\nborderline\n\n\nSubject_5\n152\n134\n18\nFALSE\nhigh\n\n\nSubject_6\n134\n143\n-9\nFALSE\nhigh\n\n\nSubject_7\n114\n135\n-21\nFALSE\nhigh\n\n\nSubject_8\n121\n139\n-18\nFALSE\nhigh\n\n\nSubject_9\n131\n120\n11\nFALSE\noptimal\n\n\nSubject_10\n130\n124\n6\nFALSE\nborderline\n\n\n\n\n\n\n\nTask 5: Function Writing\nIn this section, we are going to write our own function. This function will take in a list with two data frames (trt and placebo data frame) as an argument, with no default values. The next argument will be a R function that find a summary of a numeric column, and will have a default value of “mean”. The function will find the statistic of interest (defined by the R function argument) for the pre, post, and diff columns of both data frames. These values will be returned as a named list with meaningful names.\n\nStat_Function = function(list, stat = \"mean\") {\n  #Make sure the user inputs a list of length 2\n  if (!is.list(list) || length(list) != 2) {\n    stop(\"First argument must be a list of length two\")\n  }\n  #Make sure the user inputs a list containing two data frames\n  if (!is.data.frame(list[[1]]) || !is.data.frame(list[[2]])) {\n    stop(\"Both elements of the list need to be a data frame\")\n  }\n  treatment   &lt;- list[[1]] #Obtain the first data frame \n  placebo     &lt;- list[[2]] #Obtain the second data frame\n  my_fun      &lt;- get(stat) #Obtain the statistic function we want\n  #Store the statistic generated on the numeric columns from each data frame\n  trt_pre_bp  &lt;- my_fun(treatment$pre_bp)\n  trt_post_bp &lt;- my_fun(treatment$post_bp)\n  trt_diff_bp &lt;- my_fun(treatment$diff_bp)\n  pla_pre_bp  &lt;- my_fun(placebo$pre_bp)\n  pla_post_bp &lt;- my_fun(placebo$post_bp)\n  pla_diff_bp &lt;- my_fun(placebo$diff_bp)\n  #Create a vector that contains the six values\n  stat_vector &lt;- c(trt_pre_bp, trt_post_bp, trt_diff_bp, pla_pre_bp, pla_post_bp, pla_diff_bp)\n  #Create names for the vector, based on the statistic passed\n  names(stat_vector) &lt;- c(paste(\"Pre Trt BP\", stat),\n                         paste(\"Post Trt BP\", stat),\n                         paste(\"Trt Diff in BP\", stat),\n                         paste(\"Pre Placebo BP\", stat),\n                         paste(\"Post Placebo BP\", stat),\n                         paste(\"Placebo Diff in BP\", stat))\n  return(stat_vector)\n}\n\nNow, we are going to test to see if our function works for different statistics. The statistics we will try to find are the variance, standard deviation, minimum, and maximum.\n\nStat_Function(my_list, \"var\")\n\n        Pre Trt BP var        Post Trt BP var     Trt Diff in BP var \n              51.60789               74.76579              133.68421 \n    Pre Placebo BP var    Post Placebo BP var Placebo Diff in BP var \n             149.87778              124.98889              341.33333 \n\nStat_Function(my_list, \"sd\")\n\n        Pre Trt BP sd        Post Trt BP sd     Trt Diff in BP sd \n             7.183863              8.646721             11.562189 \n    Pre Placebo BP sd    Post Placebo BP sd Placebo Diff in BP sd \n            12.242458             11.179843             18.475209 \n\nStat_Function(my_list, \"min\")\n\n        Pre Trt BP min        Post Trt BP min     Trt Diff in BP min \n                   114                     98                     -5 \n    Pre Placebo BP min    Post Placebo BP min Placebo Diff in BP min \n                   114                    105                    -21 \n\nStat_Function(my_list, \"max\")\n\n        Pre Trt BP max        Post Trt BP max     Trt Diff in BP max \n                   140                    130                     31 \n    Pre Placebo BP max    Post Placebo BP max Placebo Diff in BP max \n                   152                    143                     33"
  }
]